//developing 2021/11/23~
//Menu HUD ID 100~199

#library "HVB"
#include "zcommon.h"
#define ACSUTILS_RECTLIB_USERVARS 1
#include "bcsutils.bcs"
#include "acsrect.bcs"
#include "Main.acs"
#include "Bonus.acs"

using BCSUtils; 

#define PLAYERTID 5000 //+PlayerNumber



//str NormalBossesName[NormalBossesCount];
//str PowerfulBossesName[PowerfulBossesCount];

//int EXPPool[Levels][EXPs][MAXPLAYERS];

bool MenuOpen = False;

int PlayTime = 0;


Void HVBNotification (str strings1, fixed holdTime, fixed x, fixed y, int cw, int ch) //original 800*600
{
	int Width = GetCVar("vid_defwidth");
	int Height = GetCVar("vid_defheight");
	
	if(cw > 0 && ch > 0)
	{
		Width = cw;
		Height = ch;
	}
	
	SetHudSize(Width, Height, False);
	
	fixed FixedWidth = (fixed)Width * x;
	fixed FixedHeight = (fixed)Height * y;
	
	SetFont("BIGFONT");
	Hudmessage(s:strings1;HUDMSG_PLAIN, 2, CR_Red, FixedWidth, FixedHeight, holdTime, 1);
}

Script "HVB_PlayerTID" (void) Enter
{
	Thing_ChangeTID(0, PLAYERTID + PlayerNumber());
}

Script "HVB_PlayerSelection" (int type, int arg1, int arg2) EVENT
{
	terminate;
	if(type == GAMEEVENT_ROUND_STARTS)
	{
		int boss_player;
		int maxplayernumber;
		
		SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
		
		for(let int i = 0; i < 64; i++)
		{
			if(!PlayerInGame(i))
				continue;
			
			maxplayernumber = i + 1;
		}
		
		do
		{
			boss_player = random(0, maxplayernumber);
			PrintBold(s:"Boss ", d:boss_player);
		}
		while(PlayerInGame(boss_player) == False);
		
		Delay(35 * 5);
		ACS_NamedExecuteAlways("HVB_SelectPlayer", 0, 0, 0, 0);
		
		//PrintBold(s:"Boss ", d:boss_player);
		
		for(let int i = 0; i < maxplayernumber; i++)
		{
			if(!PlayerInGame(i))
			{
				continue;
			}
			else if(i == boss_player)
			{
				SetActivatorToPlayer(i);
				//NamedExecuteClientScript("HVB_YouAreBOSS", i, 0, 0, 0, 0);
				ACS_NamedExecuteAlways("HVB_YouAreBOSS", 0, 0, 0, 0);
				Player_SetTeam(1, True);
			}
			else if(i != boss_player)
			{
				SetActivatorToPlayer(i);
				Player_SetTeam(0, True);
			}
		}
		
		
		
		SetActivator(0, AAPTR_NULL);
		
		//ACS_NamedExecuteAlways("HVB_BossSelection", 0, boss_player, 0, 0);
		
		Delay(35 * 5);
		ACS_NamedExecuteAlways("HVB_SelectBOSS", 0, 0, 0, 0);
		
		SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
	}
}

Script "HVB_YouAreBOSS" (void) CLIENTSIDE
{
	HVBNotification("You are BOSS", 5.0, 0.5, 0.5, 0, 0);
}

Script "HVB_SelectPlayer" (void) CLIENTSIDE
{
	HVBNotification("Selecting player...", 5.0, 0.5, 0.5, 0, 0);
}

Script "HVB_SelectBOSS" (void) CLIENTSIDE
{
	HVBNotification("Selecting boss...", 5.0, 0.5, 0.5, 0, 0);
}

/*Script "HVB_BossSelection" (int boss_player)
{
	//HVBNotification("Selecting Boss...", 5.0, 0.5, 0.25);
	
	SetActivatorToPlayer(boss_player);
	if(IsPowerful)
	{
		str PB = PowerfulBossesName[random(0, )];
	
		MorphActor(ActivatorTID(), PowerfulBossesName[], "", 0x7FFFFFFE, MRF_FULLHEALTH || MRF_WHENINVULNERABLE || MRF_LOSEACTUALWEAPON || MRF_NEWTIDBEHAVIOUR, "", "");
	}
	else
	{
		str NB = NomalBossesName[random(0, )];
		
		MorphActor(ActivatorTID(), NormalBossesName[], "", 0x7FFFFFFE, MRF_FULLHEALTH || MRF_WHENINVULNERABLE || MRF_LOSEACTUALWEAPON || MRF_NEWTIDBEHAVIOUR, "", "");
	
	}
}*/

/*Void Levelup
{
	int LULevel = CheckActorInventory(ActivatorTID(), "LevelItem");
	fixed NeedEXP = ilog2(LULevel)*100;
	GiveInventory("LevelItem", 1);
	GiveInventory("SkillItem", 5);
	TakeInventory("CurrentEXPItem", 0x7FFFFFFF);
	TakeInventory("MaxEXPItem", 0x7FFFFFFF);
	GiveInventory("MaxEXPItem", NeedEXP);
}

Script "HVB_EXPSystem" (void)
{
	int TempEXP;
	while(True)
	{
		if(MaxEXP <= CheckActorInventory(ActivatorTID(), "CurrentEXPItem") && CheckActorInventory(ActivatorTID(), "MaxEXPItem") != 0)
		{
			TempEXP = CheckActorInventory(ActivatorTID(), "CurrentEXPItem") - CheckActorInventory(ActivatorTID(), "MaxEXPItem")
			Levelup();
			GiveInventory("CurrentEXPItem", TempEXP);
		}
	Delay(3);
	}
}


Script "HVB_EXPGiver" (int type int arg1 str arg2) EVENT
{
	if(type == GAMEEVENT_ACTOR_DAMAGED)
	{
		SetActivator(0, AAPTR_DAMAGE_SOURCE);
		int GiveEXP = (BaseEXP + arg1) * (GlobalEXPmultiplier + PlayerEXPmultiplier);
		GiveInventory("CurrentEXPItem", GiveEXP);
	}
}*/


/*int CreateBox(int id, int x, int y, int w, int h)
{
	id;
	RectCreate(id, x, y, w, h);
	TextBoxX[id][BOX_X] = x + (w / 2);
	TextBoxY[id][BOX_Y] = y + (h / 2);
}

Script "HVB_Menu_BG" CLIENTSIDE
{
	while(MenuOpen)
	{	
		HudResetState();
		HudSetVirtualSize(1024.0, 768.0);
		HudSetPoint(FixedWidth, FixedHeight);
		HudDrawImage(1999, "BG");
		HudSetPoint(100.0, 100.0);//(512.0, 384.0);
		HudDrawImage(1998, "ImageBG");
	}
	HudDrawImage(1999, "");
	HudDrawImage(1998, "");
}

Script "HVB_Menu_Cursor" CLIENTSIDE
{
	SetCursorArea(1024.0, 768.0);
	while(MenuOpen)
	{	
		UpdateCursor();
		HudSetScale(2.5);
		HudSetPoint(CursorX(), CursorY());
		HudDrawImage(100, "CURSOR");
	}
	HudDrawImage(100, "");
}


Script "HVB_Menu_Main" (void) NET CLIENTSIDE
{	
	int MenuPage = 0;
	
	int Width = 1024;
	int Height = 768;
	
	fixed FixedWidth = (fixed)Width * 0.5;
	fixed FixedHeight = (fixed)Height * 0.5;
	
	
	CreateBox(0, 308.0, 315.0, 250.0, 46.0);
	CreateBox(1, 671.0, 315.0, 250.0, 46.0);
	
	CreateBox(2, 308.0, 407.0, 250.0, 46.0);
	CreateBox(3, 671.0, 407.0, 250.0, 46.0);
	
	CreateBox(4, 308.0, 499.0, 250.0, 46.0);
	CreateBox(5, 671.0, 499.0, 250.0, 46.0);
	
	CreateBox(6, 206.0, 407.0, 102.0, 46.0);
	CreateBox(7, 921.0, 407.0, 102.0, 46.0);
	
	SetCursorArea(1024.0, 768.0);
	while(MenuOpen)
	{
		HudResetState();
		HudSetVirtualSize(1024.0, 768.0);
		if(KeyPressed(BT_ALTATTACK))
		{
			MenuOpen = False;
			break;
		}
		else if(RectIsClicked(0, BT_ATTACK))
		{
			ACS_NamedExecuteWait("HVB_Menu_Bonus", 0, 0, 0, 0);
		}
		else if(RectIsClicked(1, BT_ATTACK))
		{
			RectsDelete(-1);
			ACS_NamedExecute("HVB_Menu_Loadout", 0, 0, 0, 0);
			break;
		}
		else if(RectIsClicked(2, BT_ATTACK))
		{
			RectsDelete(-1);
			ACS_NamedExecute("HVB_Menu_Bag", 0, 0, 0, 0);
			break;
		}
		else if(RectIsClicked(3, BT_ATTACK))
		{
			RectsDelete(-1);
			ACS_NamedExecute("HVB_Menu_Skill", 0, 0, 0, 0);
			break;
		}
		else if(RectIsClicked(4, BT_ATTACK))
		{
			RectsDelete(-1);
			ACS_NamedExecute("HVB_Menu_Shop", 0, 0, 0, 0);
			break;
		}
		else if(RectIsClicked(5, BT_ATTACK))
		{
			RectsDelete(-1);
			ACS_NamedExecute("HVB_Menu_Upgrade", 0, 0, 0, 0);
			break;
		}
		else if(RectIsClicked(6, BT_ATTACK))
		{
			ManuPage -= 1;
		}
		else if(RectIsClicked(7, BT_ATTACK))
		{
			MenuPage += 1;
		}
		
		
			
			HudSetScale(3.0);
			
			if(MenuPage == 1)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Bonus");
				else
					HudDrawText(200, "\c[Q8]Bonus");
				
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Load Out");
				else
					HudDrawText(201, "\c[Q8]Load Out");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Bag");
				else
					HudDrawText(202, "\c[Q8]Bag");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				if(RectIsHovered(3))
					HudDrawText(203, "\c[Z3]Skill");
				else
					HudDrawText(203, "\c[Q8]Skill");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				if(RectIsHovered(4))
					HudDrawText(204, "\c[Z3]Shop");
				else
					HudDrawText(204, "\c[Q8]Shop");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				if(RectIsHovered(5))
					HudDrawText(205, "\c[Z3]Upgrade");
				else
					HudDrawText(205, "\c[Q8]Upgrade");
				
				/*HudSetPoint(TextBoxX[6][BOX_X], TextBoxY[6][BOX_Y]);
				if(RectIsHovered(6))
					HudDrawText(206, "\c[Z3]<");
				else
					HudDrawText(206, "\c[Q8]<");*/
					
				/*HudSetPoint(TextBoxX[7][BOX_X], TextBoxY[7][BOX_Y]);
				if(RectIsHovered(7))
					HudDrawText(207, "\c[Z3]>");
				else
					HudDrawText(207, "\c[Q8]>");
			}
			else if(MenuState == 1)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Login Reward");
				else
					HudDrawText(200, "\c[Q8]Login Reward");
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Time Reward");
				else
					HudDrawText(201, "\c[Q8]Time Reward");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Level Reward");
				else
					HudDrawText(202, "\c[Q8]Level Reward");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				HudDrawText(203, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				HudDrawText(204, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
			}
			else if(MenuState == 2)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Auto Select");
				else
					HudDrawText(200, "\c[Q8]Auto Select");
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Normal Weapons");
				else
					HudDrawText(201, "\c[Q8]Normal Weapons");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Melee Weapons");
				else
					HudDrawText(202, "\c[Q8]Melee Weapons");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				if(RectIsHovered(3))
					HudDrawText(203, "\c[Z3]Special Weapons");
				else
					HudDrawText(203, "\c[Q8]Special Weapons");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				if(RectIsHovered(4))
					HudDrawText(204, "\c[Z3]Legendary Weapons");
				else
					HudDrawText(204, "\c[Q8]Legendary Weapons");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				if(RectIsHovered(5))
					HudDrawText(205, "\c[Z3]Artifact");
				else
					HudDrawText(205, "\c[Q8]Artifact");
			}
			else if(MenuState == 3)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Bonus");
				else
					HudDrawText(200, "\c[Q8]Bonus");
				
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Load Out");
				else
					HudDrawText(201, "\c[Q8]Load Out");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Bag");
				else
					HudDrawText(202, "\c[Q8]Bag");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				if(RectIsHovered(3))
					HudDrawText(203, "\c[Z3]Skill");
				else
					HudDrawText(203, "\c[Q8]Skill");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				if(RectIsHovered(4))
					HudDrawText(204, "\c[Z3]Shop");
				else
					HudDrawText(204, "\c[Q8]Shop");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				if(RectIsHovered(5))
					HudDrawText(205, "\c[Z3]Upgrade");
				else
					HudDrawText(205, "\c[Q8]Upgrade");
				
				HudSetPoint(TextBoxX[6][BOX_X], TextBoxY[6][BOX_Y]);
				if(RectIsHovered(6))
					HudDrawText(206, "\c[Z3]<");
				else
					HudDrawText(206, "\c[Q8]<");
					
				HudSetPoint(TextBoxX[7][BOX_X], TextBoxY[7][BOX_Y]);
				if(RectIsHovered(7))
					HudDrawText(207, "\c[Z3]>");
				else
					HudDrawText(207, "\c[Q8]>");
			}
			else if(MenuState == 4)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Base Skill");
				else
					HudDrawText(200, "\c[Q8]Base Skill");
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Role Skill");
				else
					HudDrawText(201, "\c[Q8]Role Skill");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Job Skill");
				else
					HudDrawText(202, "\c[Q8]Job Skill");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				if(RectIsHovered(3))
					HudDrawText(203, "\c[Z3]???");
				else
					HudDrawText(203, "\c[Q8]???");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				HudDrawText(204, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
			}
			else if(MenuState == 5)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Items");
				else
					HudDrawText(200, "\c[Q8]Items");
				
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Weapons");
				else
					HudDrawText(201, "\c[Q8]Weapons");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Characters");
				else
					HudDrawText(202, "\c[Q8]Characters");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				if(RectIsHovered(3))
					HudDrawText(203, "\c[Z3]???");
				else
					HudDrawText(203, "\c[Q8]???");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				HudDrawText(204, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
			}
			else if(MenuState == 6)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Weapon Upgrade");
				else
					HudDrawText(200, "\c[Q8]Weapon Upgrade");
				
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Character Upgrade");
				else
					HudDrawText(201, "\c[Q8]Character Upgrade");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Boss Upgrade");
				else
					HudDrawText(202, "\c[Q8]Boss Upgrade");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				HudDrawText(204, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				HudDrawText(204, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
			}
			else if(MenuPage == 2)
			{
				HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
				if(RectIsHovered(0))
					HudDrawText(200, "\c[Z3]Mission (Wip)");
				else
					HudDrawText(200, "\c[Q8]Mission (Wip)");
				
				HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
				if(RectIsHovered(1))
					HudDrawText(201, "\c[Z3]Query");
				else
					HudDrawText(201, "\c[Q8]Query");
				
				HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
				HudDrawText(205, "\c[Q8]Wip");
				
				HudSetPoint(TextBoxX[6][BOX_X], TextBoxY[6][BOX_Y]);
				if(RectIsHovered(6))
					HudDrawText(206, "\c[Z3]<");
				else
					HudDrawText(206, "\c[Q8]<");
			
		}
		
		Delay(1);
	}
}

Script "HVB_Menu_Bonus" CLIENTSIDE
{
	int MenuPage = 0;
	
	int Width = 1024;
	int Height = 768;
	
	fixed FixedWidth = (fixed)Width * 0.5;
	fixed FixedHeight = (fixed)Height * 0.5;
	
	CreateBox(0, 308.0, 315.0, 250.0, 46.0);
	CreateBox(1, 671.0, 315.0, 250.0, 46.0);
	
	CreateBox(2, 308.0, 407.0, 250.0, 46.0);
	CreateBox(3, 671.0, 407.0, 250.0, 46.0);
	
	CreateBox(4, 308.0, 499.0, 250.0, 46.0);
	CreateBox(5, 671.0, 499.0, 250.0, 46.0);
	
	RectsDelete(6);
	RectsDelete(7);
	
	HudDrawText(206, "");
	HudDrawText(207, "");
	
	SetCursorArea(1024.0, 768.0);
	while(MenuOpen)
	{
		HudResetState();
		HudSetVirtualSize(1024.0, 768.0);
		HudSetScale(3.0);
		
		if(KeyPressed(BT_ALTATTACK))
		{
			if(Menu_Login)
			else if(Menu_Time)
			else if(Menu_Level)
			else
			break;
		}
		else if(RectIsClicked(0, BT_ATTACK))
		{
			CreateBox(8, 308.0, 499.0, 250.0, 46.0);
			Menu_Login = True;
		}
		else if(RectIsClicked(1, BT_ATTACK))
		{
			Menu_Time
		}
		else if(RectIsClicked(2, BT_ATTACK))
		{
			Menu_Level;
		}
		else if(RectIsClicked(6, BT_ATTACK))
		{
			ManuPage -= 1;
		}
		else if(RectIsClicked(7, BT_ATTACK))
		{
			MenuPage += 1;
		}
		else if(RectIsClicked(7, BT_ATTACK))
		{
			ACS_NamedExecute("HVB_ReceiveLoginClient", 0, 0, 0, 0);
		}
		
		
		if(Menu_Bonus)
		{
			HudSetPoint(TextBoxX[0][BOX_X], TextBoxY[0][BOX_Y]);
			if(RectIsHovered(0))
				HudDrawText(200, "\c[Z3]Login Reward");
			else
				HudDrawText(200, "\c[Q8]Login Reward");
			HudSetPoint(TextBoxX[1][BOX_X], TextBoxY[1][BOX_Y]);
			if(RectIsHovered(1))
				HudDrawText(201, "\c[Z3]Time Reward");
			else
				HudDrawText(201, "\c[Q8]Time Reward");
					
			HudSetPoint(TextBoxX[2][BOX_X], TextBoxY[2][BOX_Y]);
			if(RectIsHovered(2))
				HudDrawText(202, "\c[Z3]Level Reward");
			else
				HudDrawText(202, "\c[Q8]Level Reward");
					
			HudSetPoint(TextBoxX[3][BOX_X], TextBoxY[3][BOX_Y]);
			HudDrawText(203, "\c[Q8]Wip");
					
			HudSetPoint(TextBoxX[4][BOX_X], TextBoxY[4][BOX_Y]);
			HudDrawText(204, "\c[Q8]Wip");
					
			HudSetPoint(TextBoxX[5][BOX_X], TextBoxY[5][BOX_Y]);
			HudDrawText(205, "\c[Q8]Wip");
		}
		else if(Menu_Login)
		{
			if(!GotLogin)
			{
				HudSetPoint(TextBoxX[8][BOX_X], TextBoxY[8][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]Get");
				else
					HudDrawText(202, "\c[Q8]Get");
			}
			else
			{
				HudSetPoint(TextBoxX[8][BOX_X], TextBoxY[8][BOX_Y]);
				HudDrawText(202, "\c[Q8]Already got");
			}
		}
		else if(Menu_Time)
		{
			if(PlayTime < 1800)
			{
				HudSetPoint(TextBoxX[8][BOX_X], TextBoxY[8][BOX_Y]);
				HudDrawText(202, "\c[Q8]Not qualified");
			}
			else if(PlayTime
			{
				HudSetPoint(TextBoxX[8][BOX_X], TextBoxY[8][BOX_Y]);
				if(RectIsHovered(2))
					HudDrawText(202, "\c[Z3]30");
				else
					HudDrawText(202, "\c[Q8]Get");
			}
			else
			{
				HudSetPoint(TextBoxX[8][BOX_X], TextBoxY[8][BOX_Y]);
				HudDrawText(202, "\c[Q8]Already got");
			}
		}
	}
	
	ACS_NamedExecute("HVB_Menu_Main", 0, 0, 0, 0);
	
}

Script "HVB_SyncLoginToday" CLIENTSIDE
{
	GotLoginToday = True;
}

Script "HVB_ReceiveLoginServer" NET
{
	if(GotLoginToday)
		terminate;
	GiveInventory
	NamedExecuteClientScript("HVB_SyncLoginToday", PlayerNumber(), 0, 0, 0, 0);
	GotLoginToday = True;
}

Script "HVB_ReceiveLoginClient" CLIENTSIDE
{
	while(!GotLoginToday)
	{
		NamedRequestScriptPuke("HVB_ReceiveLoginServer", 0, 0, 0, 0);
		Delay(10);
	}
}

Script "HVB_PlayTimeLogger"
{
	int PN = PlayerNumber();
	while(True)
	{
		switch(PlayTime[PN])
		{
			case: 1800
				30MinReword = True;
				break;
			case: 3600
				1HReword = True;
				break;
			case: 7200
				2HReword = True;
				break;
			case: 10800
				3HReword = True;
				break;
			case: 14400
				4HReword = True;
				break;
			case: 18000
				5HReword = True;
				break;
			case: 21600
				6HReword = True;
				break;
			case: 25200
				7HReword = True;
				break;
			case: 28800
				8HReword = True;
				break;
			case: 32400
				9HReword = True;
				break;
			default:
				break;
		}
		Delay(35);
		PlayTime[PN]++;
	}
}

Script "HVB_SyncPlayTime" (int arg1, int arg2) CLIENTSIDE
{
	PlayTime[arg2] = arg1;
}

Script "HVB_ReceiveTimeServer" NET
{
	NamedExecuteClientScript("HVB_SyncPlayTime", PlayerNumber(), 0, PlayTime[PlayerNumber()], PlayerNumber(), 0);
}

Script "HVB_ReceiveTimeClient" CLIENTSIDE
{
	NamedRequestScriptPuke("HVB_GetTimeServer", 0, 0, 0, 0);
}

Script "HVB_SyncGotLevelReword" (int arg1, int arg2) CLIENTSIDE
{
	GotLevelReword[arg2] = arg1;
}

Script "HVB_ReceiveLevelServer" NET
{
	
	NamedExecuteClientScript("HVB_SyncGotLevelReword", PlayerNumber(), 0, PlayTime[PlayerNumber()], PlayerNumber(), 0);
}

Script "HVB_ReceiveLevelClient" () CLIENTSIDE
{
	NamedRequestScriptPuke("HVB_GetLevelServer", 0, 0, 0, 0);
}*/
